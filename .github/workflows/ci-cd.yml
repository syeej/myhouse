name: MyHouse CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKER_IMAGE
          script: |
            set -e
            echo "Deployment started at $(date)"
            mkdir -p ~/app 
            cd ~/app
            
            # .env 파일에 DOCKER_IMAGE 변수 직접 저장
            # 프로세스 치환(<(...)) 대신 파일을 사용하여 호환성 문제 해결
            echo "DOCKER_IMAGE=${DOCKER_IMAGE}" > .env
            sudo chown -R ubuntu:ubuntu ~/app
            echo "DOCKER_IMAGE value: ${DOCKER_IMAGE}"
            
            # 디버깅을 위한 .env 파일 내용 출력
            echo "==== Debugging: Content of .env file ===="
            cat .env
            echo "========================================="
            
            # 디버깅을 위한 docker-compose.yml 파일 내용 출력
            echo "==== Debugging: Content of docker-compose.yml ===="
            cat docker-compose.yml
            echo "=================================================="
            
            # 디버깅을 위한 환경 변수 출력
            echo "==== Debugging: Environment Variables ===="
            env | grep DOCKER
            echo "=========================================="
            
            # docker-compose down 명령 실행 (프로세스 치환 제거)
            echo "docker-compose down start"
            docker-compose --env-file .env down
            echo "docker-compose down end"
            
            # docker pull 명령 실행 (환경 변수 사용)
            echo "docker pull ${DOCKER_IMAGE} start"
            docker pull ${DOCKER_IMAGE}
            echo "docker pull ${DOCKER_IMAGE} end"
            
            # docker-compose up 명령 실행 (프로세스 치환 제거)
            echo "docker-compose up -d start"
            docker-compose --env-file .env up -d
            echo "docker-compose up -d end"
            
            # 사용하지 않는 Docker 이미지 정리
            docker image prune -af
            echo "Deployment completed at $(date)"