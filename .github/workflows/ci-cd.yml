name: MyHouse CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Save docker-compose.yml
        uses: actions/upload-artifact@v2
        with:
            name: docker-compose
            path: docker-compose.yml

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Download docker-compose.yml
        uses: actions/download-artifact@v2
        with:
          name: docker-compose

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "Deployment started at $(date)"
            
            mkdir -p ~/app 
            cd ~/app
            
            echo "${{ secrets.SSH_KEY }}" > private_key.pem
            chmod 600 private_key.pem
            scp -i private_key.pem -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:~/app/
            rm private_key.pem
            
            sudo chown -R ubuntu:ubuntu ~/app
            
            cat << EOF > .env
            DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            EOF
            
            docker-compose down
            docker-compose up -d
            docker image prune -af
            
            echo "Deployment completed at $(date)"