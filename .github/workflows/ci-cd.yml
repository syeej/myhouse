name: MyHouse CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
          #set -e: 오류 발생 시 스크립트 실행을 중단
            echo "Deployment started at $(date)"
          # 로그 추가: 배포 시작 시간을 기록
            
            mkdir -p ~/app 
          # ~/app 디렉토리가 없으면 생성
            cd ~/app
            
            echo "${{ secrets.DOCKER_COMPOSE_YML }}" > docker-compose.yml
          # docker-compose.yml 파일 생성/업데이트(GitHub Secrets에서 docker-compose관리)
            
            sudo chown -R ubuntu:ubuntu ~/app
            # ubuntu 사용자에게 ~/app 디렉토리 소유권 부여
            
            docker-compose down
            # 현재 실행 중인 Docker Compose 프로젝트 모든 컨테이너 중지
            
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
            # docker 이미지 Pull
            
            echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}" > .env
            # .env 파일 업데이트
            
            docker-compose up -d
             # docker compose에 정의된 서비스를 백그라운드 실행
            
            docker image prune -af
            # 사용하지 않는 Docker 이미지 삭제
                    
            echo "Deployment completed at $(date)"
            # 로그 추가